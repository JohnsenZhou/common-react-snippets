{
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react'"],
    "description": "Import React"
  },

  "Import React and Component": {
    "prefix": "imrc",
    "body": [
      "import React, { Component } from 'react'"
    ],
    "description": "Import React, { Component }"
  },

  "Import React, { useState }": {
    "prefix": "imrs",
    "body": [
      "import React, { useState } from 'react'"
    ],
    "description": "Import React, { useState }"
  },

  "Import React, { useState, useEffect }": {
    "prefix": "imrse",
    "body": [
      "import React, { useState, useEffect } from 'react'"
    ],
    "description": "Import React, { useState, useEffect }"
  },

  "Import Pure Component": {
    "prefix": "impc",
    "body": ["import React, { PureComponent } from 'react'"],
    "description": "Import React, { PureComponent }"
  },

  "Import Function Component": {
    "prefix": "imfc",
    "body": ["import React, { FunctionComponent } from 'react'"],
    "description": "Import React, { FunctionComponent }"
  },

  "Class Component": {
    "prefix": "cc",
    "body": [
      "import React, { Component } from 'react'",
      " ",
      "interface $1Props {",
      "\t$2",
      "}",
      " ",
      "interface $1State {",
      "\t$3",
      "}",
      " ",
      "class $1 extends Component<$1Props, $1State> {",
      "\tstate = {  }",
      "\trender() { ",
      "\t\treturn ( $0 )",
      "\t}",
      "}",
      " ",
      "export default $1"
    ],
    "description": "Class Component"
  },

  "Pure Component": {
    "prefix": "pc",
    "body": [
      "import React, { PureComponent } from 'react'",
      " ",
      "interface $1Props {",
      "\t$2",
      "}",
      " ",
      "interface $1State {",
      "\t$3",
      "}",
      " ",
      "class $1 extends PureComponent<$1Props, $1State> {",
      "\tstate = {  }",
      "\trender() { ",
      "\t\treturn ( $0 )",
      "\t}",
      "}",
      " ",
      "export default $1"
    ],
    "description": "Pure Component"
  },

  "Class Component Constructor": {
    "prefix": "ccc",
    "body": [
      "import React, { Component } from 'react'",
      " ",
      "interface $1Props {",
      "\t$2",
      "}",
      " ",
      "interface $1State {",
      "\t$3",
      "}",
      " ",
      "class $1 extends Component<$1Props, $1State> {",
      "\tconstructor(props: $1Props) {",
      "\t\tsuper(props)",
      "\t\tthis.state = {  }",
      "\t}",
      "\trender() { ",
      "\t\treturn ( $0 )",
      "\t}",
      "}",
      " ",
      "export default $1"
    ],
    "description": "Class Component with Constructor"
  },

  "Function Component With Hooks": {
    "prefix": "fc",
    "body": [
      "import React, { useState, useEffect } from 'react'",
      " ",
      "interface $1Props {",
      "\t",
      "}",
      " ",
      "function $1 (props: $1Props) {",
      "\tconst {  } = props",
      "\tconst [${2}, set${2/(.*)/${2:/capitalize}/}] = useState($3)",
      " ",
      "\tuseEffect(() => {",
      "\t\t",
      "\t}, [])",
      " ",
      "\treturn (",
      "\t\t<div></div>",
      "\t)",
      "}",
      " ",
      "export default $1"
    ],
    "description": "Function Component With Hooks"
  },

  "Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "import React from 'react'",
      " ",
      "interface $1Props {",
      "\t$2",
      "}",
      " ",
      "function $1 (props: $1Props) {",
      "\tconst {  } = props",
      "}",
      "\treturn (",
      "\t\t<div></div>",
      "\t)",
      " ",
      "export default $1"
    ],
    "description": "Stateless Function Component"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}"],
    "description": "componentDidMount"
  },

  "useEffect": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, [])"
    ],
    "description": "useEffect Hook"
  },

  "getDerivedStateFromProps": {
    "prefix": "gds",
    "body": ["static getDerivedStateFromProps(nextProps: $1Props, prevState: $1State) {", "\t$0", "}"],
    "description": "getDerivedStateFromProps"
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps: $1Props, nextState: $1State) {", "\t$0", "}"],
    "description": "shouldComponentUpdate"
  },

  "componentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps: $1Props, prevState: $1State) {", "\t$0", "}"],
    "description": "componentDidUpdate"
  },

  "componentWillUnmount": {
    "prefix": "cwum",
    "body": ["componentWillUnmount() {", "\t$0", "}"],
    "description": "componentWillUnmount"
  },

  "componentDidCatch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error, info) {", "\t$0", "}"],
    "description": "componentDidCatch"
  },

  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": ["getSnapshotBeforeUpdate(prevProps: $1Props, prevState: $1State) {", "\t$0", "}"],
    "description": "getSnapshotBeforeUpdate"
  },

  "setState": {
    "prefix": "ss",
    "body": ["this.setState({ $1: $2 })"],
    "description": "setState"
  },

  "Functional setState": {
    "prefix": "ssf",
    "body": ["this.setState(prevState => {", "\treturn { $1: prevState.$1 }", "})"],
    "description": "Functional setState"
  },

  "Declare a new state variable using State Hook": {
    "prefix": "usf",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
    ],
    "description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
  },

  "render": {
    "prefix": "ren",
    "body": ["render() {", "\treturn (", "\t\t $0", "\t)", "}"],
    "description": "render"
  },

  "Render Prop": {
    "prefix": "rprop",
    "body": [
      "interface $1Props {",
      "\trender: (state: $1State) => JSX.Element",
      "}",
      " ",
      "interface $1State {",
      "\t$2",
      "}",
      " ",
      "class $1 extends React.Component<$1Props, $1State> {",
      "\tstate = { $3: $4 }",
      "\trender() { ",
      "\t\treturn this.props.render(this.state)",
      "\t}",
      "}",
      " ",
      "export default $1"
    ],
    "description": "Render Prop"
  },

  "Import antd": {
    "prefix": "ima",
    "body": ["import { $1 } from 'antd'"],
    "description": "Import antd"
  },

  "Import style": {
    "prefix": "ims",
    "body": ["import styles from './$1.less'"],
    "description": "Import style"
  },

  "Import module style": {
    "prefix": "imms",
    "body": ["import styles from './$1.module.less'"],
    "description": "Import module style"
  },

  "Mobx observable with comment": {
    "prefix": "mobs",
    "body": [
      "/**  */",
      "@observable $1 = $2"
    ],
    "description": "Mobx observable with comment"
  },

  "Mobx action with comment": {
    "prefix": "mact",
    "body": [
      "/**  */",
      "@action $1 = async () => {",
      "\t$2",
      "}"
    ],
    "description": "Mobx action with comment"
  },

  "Div with module class": {
    "prefix": "dwc",
    "body": ["<div className={styles.$1}>$2</div>"],
    "description": "Div with module class"
  },

  "Div with global class": {
    "prefix": "dwgc",
    "body": ["<div className='$1'>$2</div>"],
    "description": "Div with class"
  },

  "My Log": {
    "prefix": "mlg",
    "body": [
      "console.log('========start========')",
      "console.log($1)",
      "console.log('=========end=========')"
    ],
    "description": "My Log"
  }
}